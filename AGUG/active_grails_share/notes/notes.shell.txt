
sudo -u postgres psql postgres

create user active_gwudev with password 'active-grails-12';
create database active_gw_dev_001 with owner active_gwudev;
grant all privileges on database active_gw_dev_001 to active_gwudev;

To log in: psql -h localhost -U active_gwudev -d active_gw_dev_001

create user active_gwutest with password 'active-grails-13';
create database active_gw_test_001 with owner active_gwutest;
grant all privileges on database active_gw_test_001 to active_gwutest;

jdbc:postgresql://localhost:5432/

In the console:
import org.javalite.activejdbc.Base
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import info.shelfunit.active.share.SingleState 
import info.shelfunit.active.share.BookAuthor
import info.shelfunit.active.share.Book
import info.shelfunit.active.share.MetaLoader

Base.open( "org.postgresql.Driver", "jdbc:postgresql://localhost:5432/active_gw_dev_001", "active_gwudev", "active-grails-12" ) 
Base.open( 'com.mysql.jdbc.Driver', 'jdbc:mysql://localhost:3306/active_gw_001', 'active_gwu001', 'active-grails-12' )  

MetaLoader.createNewMethods()
texas = SingleState.find( 'id = 1' )

new SingleState().set('state_name', 'Illinois2').set( 'largest_city', 'Chicago').set('capital_city', 'Springfield').set( 'population', 13000000).set('version', 0).saveIt()
idaho = new SingleState()
idaho.set('state_name', 'Idaho')
idaho.set('capital_city', 'Boise')
idaho.set('largest_city', 'Boise')
idaho.set('population', 2500000)
idaho.set('version', 0)

set('id', Base.count('single_state') + 1).
Employee e = Employee.findFirst("first_name = ?", "John");
println(e.get("last_name") + ", id: " + e.get("id"))
e.set("last_name", "Steinbeck2").saveIt();


-----------------------
p = new BookAuthor()
p.set( 'first_name', 'Jonathan').set( 'last_name', 'Franzen' ).set( 'country', 'USA!!!' ).set( 'year_of_birth', 1959 ).set( 'version', 0 ).saveIt()
ba2 = new BookAuthor()
ba2.setFirstName('David').setLastName('Hume').setCountry('Scotland').setYearOfBirth(1711).setVersion(0).saveIt()

bho = new BookAuthor()
bho.setFirstName('Barack').setLastName('Obama').setCountry('USA!!!').setYearOfBirth(1971).setVersion(0).saveIt()

Where returns a list, we want the first:
obama = BookAuthor.findByLastName('Obama')[0] // this is case sensitive
jf = BookAuthor.findByLastName('Franzen').getAt(0)

hp1 = new Book()
hp1.setTitle('Harry Potter and the Wrath of Khan') 

freedom = new Book()
freedom.setTitle('Freedom').setSummary('A good book').setYearPublished(2010).setVersion(0).setNumberOfPages(500)
jf.add(freedom)

threeWeekProjects = programmer.get(Project.class, "duration_weeks = ?", 3)
scottishBooks = Book.get(
select * from book where author_id in (select id from book_author where country = 'Scotland')
Book.where('author_id in (select id from book_author where country = ?)', 'Scotland')

Book.where('author_id in (select id from book_author where country = ?) and year_published < ?', 'Scotland', 2000)

-----------------------
From a map:
stateMap = [:]
stateMap.state_name = 'Iowa'
stateMap.capital_city = 'Des Moines'
stateMap.largest_city = 'Iowa City'
stateMap.version = 0
stateMap.population = 5000000

ss = new SingleState()
ss.fromMap( stateMap )
ss.saveIt()
===> true

-----------------------
In shell:
e2 = new Employee();
e2.set( "first_name", "Ryan" )
e2.set( "last_name", new Date() )
e2.saveIt()

e3 = new Employee()
e3.set("first_name", "John")
e3.set("last_name", "John")
e3.saveIt()
Cannot do "def" or put in the object

e = Employee.findFirst( "first_name = ?", "Ryan" )

largest_city, capital_city, state_name, population

Postgres:
setting id w/serial:
CREATE TABLE single_state (
    id integer NOT NULL,
    record_version bigint NOT NULL,
    capital_city character varying(255) NOT NULL,
    largest_city character varying(255) NOT NULL,
    state_name character varying(255) NOT NULL,
    population integer NOT NULL,
    version integer
);

setting id w/grails sequence:
CREATE TABLE single_state (
    id bigint NOT NULL,
    version bigint NOT NULL,
    capital_city character varying(255) NOT NULL,
    largest_city character varying(255) NOT NULL,
    population integer NOT NULL,
    state_name character varying(255) NOT NULL
);
--
Dynamic properties:
Creating properties on demand (a.k.a. dynamic properties) has been deprecated and is scheduled to be removed in Gradle 2.0. Please read http://gradle.org/docs/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html for information on the replacement for dynamic properties.
Deprecated dynamic property: "projectMainClassesDir" on "task ':compileGroovy'", value: "/home/ericm/github/my_...".
Deprecated dynamic property: "rootLoader" on "task ':compileGroovy'", value: "null".
**************************** START INSTRUMENTATION ****************************
Directory: /home/ericm/github/my_groovy_apps_001/agug/active_grails_share/build/classes/main
Found model: info.shelfunit.active.share.SingleState
Instrumented class: info.shelfunit.active.share.SingleState in directory: /home/ericm/github/my_groovy_apps_001/agug/active_grails_share/build/classes/main/
**************************** END INSTRUMENTATION ****************************
Deprecated dynamic property: "activejdbcInstrumentSpyFile" on "task ':compileGroovy'", value: ".activejdbc_instrument".



