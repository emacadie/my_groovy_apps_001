apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'application'

repositories {
  mavenCentral()
}

dependencies {

    testCompile 'junit:junit:4.10'
    testCompile 'org.mockito:mockito-all:[1.8.5,)'
    // From Maven, it's GroupId:ArtifactId:Version 
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'xmlunit:xmlunit:1.5'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'log4j:log4j:1.2.17'

    testRuntime 'org.slf4j:slf4j-ext:1.7.+'
    testRuntime 'org.slf4j:jcl-over-slf4j:1.7.+'
    testRuntime 'org.slf4j:jul-to-slf4j:1.7.+'
    testRuntime 'org.slf4j:log4j-over-slf4j:1.7.+'
    
    testRuntime 'ch.qos.logback:logback-core:1.0.+'
    testRuntime 'ch.qos.logback:logback-classic:1.0.+'
    compile 'org.codehaus.groovy:groovy-all:2.3.3'
     
    // from Spock
    testCompile "org.spockframework:spock-core:0.5-groovy-1.7"

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.2" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:2.2"     // enables mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:1.2" // enables mocking of classes without default constructor (together with CGLIB)

  }


test {
  maxParallelForks = 5
  forkEvery = 50
  // this will make it run the test every time you run 'gradle test'
  outputs.upToDateWhen { false }
}

task runJava( type: JavaExec ) {
     println( "-- Groovy version: " + groovy.lang.GroovySystem.getVersion() )
     dependsOn classes
     description = 'Run gradle.sample.SampleApp'
     // Java main class to execute.
     main = 'org.xbill.Lookup'
     // We need to set the classpath.
     classpath sourceSets.main.runtimeClasspath
     // Extra options can be set.
     systemProperty 'sysProp', 'notUsed'
     jvmArgs '-client'
     // We can pass arguments to the main() method of gradle.sample.SampleApp.
     args 'www.yahoo.com'
}

task runGroovy( type: JavaExec ) {
     println( "-- Groovy version: " + groovy.lang.GroovySystem.getVersion() )
     dependsOn classes
     description = 'Run gradle.sample.SampleApp'
     // to set main class from command line
     if ( rootProject.hasProperty( "mainClass" ) ) {     
     	main = mainClass
     } else {
       main = 'info.shelfunit.app.math.FirstRunner'
     }

     classpath sourceSets.main.runtimeClasspath
     // Extra options can be set.
     systemProperty 'sysProp', 'notUsed'
     jvmArgs '-client'
     // We can pass arguments to the main() method of gradle.sample.SampleApp.
     if ( rootProject.hasProperty( "mainArgs" ) ) {     
     	args = mainArgs.tokenize() // args wants a List, so split by spaces if need be
     }
}

// run "gradle console" for this one
task( console, dependsOn: 'classes', type: JavaExec ) {
  main = 'groovy.ui.Console'
  classpath = sourceSets.main.runtimeClasspath
}

groovydoc {
    exclude "info/shelfunit/properties/sample/*"
}

mainClassName = "info.shelfunit.properties.sample.SampleRunner"


